swirl()
swirl()
library(swirl)
swirl()
==
TRUE == TRUE
(FLASE=TRUE) == FALSE
(FALSE = TRUE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!TRUE == (5 == 1)
!TRUE == (5 == 7)
!5 == 7
FALSE & FALSE
TRUE & TRUE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TURE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints < 0)
all(ints >0)
sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
View(boring_function)
View(boring_function)
submit()
submit()
submot()
submit()
View(boring_function)
View(boring_function)
View(boring_function)
View(boring_function)
skip()
View(boring_function)
view(boring_function(x))
View(boring_function)
boring_function("My First function!")
boring_function('My first function
boring_function('My first function!')
boring_function
my_mean
mean
skip()
View(my_mean)
my_mean(c(4,5,10))
source('C:/Users/�츮��/AppData/Local/Temp/RtmpSqFBEz/my_mean-correct.R')
my_mean
my_mean
swirl()
help()
pass()
skip()
swirl()
skip()
remainder()
remainder
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
args(args)
submit()
submit()
bye()
add2(3,5)
add2 <- function(x,y) {
x+y
}
add2(3,5)
above <- function(x,n) {
use <- x > n
x[use]
}
above
x < -1:20
x <- 1:20
above(x,12)
above <- function(x,n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- means(y[,i])
}
means
}
columnmmean(airquality)
columnmean(airquality)
?function
function
function( x = matrix())
pwd
crwd
setwd
gwtwd
getwd
getwd()
setwd(C:/Users/우리집/Documents/GitHub/ProgrammingAssignment2)
setwd("C:/Users/우리집/Documents/GitHub/ProgrammingAssignment2")
getwd()
list.files()
open.srcfile("cachematix.R")
lsa
ls
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse
}
m <- NULL
m
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
}
makeCacheMatrix(matrix(1:6,2,3))
get <- function() x
get(x)
get
get(a)
